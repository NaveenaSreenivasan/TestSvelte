import { S as SvelteComponentDev, i as init, s as safe_not_equal, t as text, e as element, d as claim_text, c as claim_element, b as children, f as detach, h as add_location, D as listen, j as insert, k as append, n as noop } from './chunk.107bc870.js';
import './chunk.ffa160eb.js';
import { s as storeArr } from './chunk.013f23a1.js';

/* src/routes/checkcode.svelte generated by Svelte v3.6.3 */

const file = "src/routes/checkcode.svelte";

function create_fragment(ctx) {
	var t0, button, t1, dispose;

	return {
		c: function create() {
			t0 = text("\n$storeArr\n");
			button = element("button");
			t1 = text("Change arr");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n$storeArr\n");

			button = claim_element(nodes, "BUTTON", {}, false);
			var button_nodes = children(button);

			t1 = claim_text(button_nodes, "Change arr");
			button_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			document.title = "Check code";
			add_location(button, file, 15, 0, 284);
			dispose = listen(button, "click", check);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, button, anchor);
			append(button, t1);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(button);
			}

			dispose();
		}
	};
}

function check() {
  console.log("storeArr value is",storeArr);
  storeArr.update(val=>["new Value"]);
}

class Checkcode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Checkcode;
export { check };
